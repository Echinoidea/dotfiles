-- Function to read and parse color configuration file
function read_colors(file_path)
    local colors = {}
    local color_keys = {
        "background", "foreground", "cursor",
        "color0", "color8",
        "color1", "color9",
        "color2", "color10",
        "color3", "color11",
        "color4", "color12",
        "color5", "color13",
        "color6", "color14",
        "color7", "color15"
    }

    -- Open the file
    local file = io.open(file_path, "r")
    if not file then
        print("Error: Could not open file " .. file_path)
        return nil
    end

    -- Read colors
    local index = 1
    for line in file:lines() do
        -- Trim whitespace and remove '#' if present
        line = line:match("^%s*(.-)%s*$"):gsub("^#", "")

        -- Only process non-empty lines
        if line ~= "" then
            if index <= #color_keys then
                colors[color_keys[index]] = "#" .. line
                index = index + 1
            end
        end
    end

    file:close()

    return colors
end

-- Example usage
local color_config = read_colors("/home/gabriel/.cache/wal/colors")

-- Printing colors (optional, for debugging)
if color_config then
    for key, value in pairs(color_config) do
        print(key .. ": " .. value)
    end
end

-- Function to get a specific color
function get_color(colors, key)
    return colors and colors[key] or nil
end

-- Example of retrieving a specific color
bg_color = get_color(color_config, "background")
fg_color = get_color(color_config, "foreground")
color0 = get_color(color_config, "color0")
color1 = get_color(color_config, "color1")

conky.config = {

	--Various settings
	background = true, 							-- forked to background
	cpu_avg_samples = 2,						-- The number of samples to average for CPU monitoring.
	diskio_avg_samples = 10,					-- The number of samples to average for disk I/O monitoring.
	double_buffer = true,						-- Use the Xdbe extension? (eliminates flicker)
	if_up_strictness = 'address',				-- how strict if testing interface is up - up, link or address
	net_avg_samples = 2,						-- The number of samples to average for net data
	no_buffers = true,							-- Subtract (file system) buffers from used memory?
	temperature_unit = 'celsius',			-- fahrenheit or celsius
	text_buffer_size = 2048,					-- size of buffer for display of content of large variables - default 256
	update_interval = 1,						-- update interval
	imlib_cache_size = 0,                       -- disable image cache to get a new spotify cover per song

	-- Placement (Conky on MIDDLE of THREE monitors at 1920x1080)
	--alignment = 'top_left',		                -- top_left,top_middle,top_right,bottom_left,bottom_middle,bottom_right,
	--gap_x = 3540,                               -- pixels between right or left border
	--gap_y = 70,									-- pixels between bottom or left border

    -- Placement (For SINGLE monitor users!)
	alignment = 'top_right',		            -- top_left,top_middle,top_right,bottom_left,bottom_middle,bottom_right,
	gap_x = 20,								-- pixels between right or left border
	gap_y = 44,								-- pixels between bottom or left border

    -- Size
    minimum_height = 200,						-- minimum height of window
	minimum_width = 260,						-- minimum width of window
	maximum_width = 260,						-- maximum width of window

	--Graphical
	border_inner_margin = 5, 					-- margin between border and text
	border_outer_margin = 5, 					-- margin between border and edge of window
	border_width = 0, 							-- border width in pixels
	default_bar_width = 260,					-- default is 0 - full width
	default_bar_height = 10,					-- default is 6
	default_gauge_height = 25,					-- default is 25
	default_gauge_width =40,					-- default is 40
	default_graph_height = 40,					-- default is 25
	default_graph_width = 153,					-- default is 0 - full width
	default_shade_color = '#000000',			-- default shading colour
	default_outline_color = '#000000',			-- default outline colour
	draw_borders = false,						-- draw borders around text
	draw_graph_borders = true,					-- draw borders around graphs
	draw_shades = true,						-- draw shades
	draw_outline = false,						-- draw outline
	stippled_borders = 0,						-- dashing the border

	--Textual
	format_human_readable = true,				-- KiB, MiB rather then number of bytes
	font  = 'DepartureMono Nerd Font:bold:size=10',  	-- the default font used
	font2 = 'DepartureMono Nerd Font:bold:size=30',         	-- font for the time
	font3 = 'DepartureMono Nerd Font:size=14',               	-- font for the date
	font4 = 'DepartureMono Nerd Font:bold:size=9',              -- font for the keybindings heading
	max_text_width = 0,							-- 0 will make sure line does not get broken if width too smal
	max_user_text = 16384,						-- max text in conky default 16384
	override_utf8_locale = true,				-- force UTF8 requires xft
	short_units = true,							-- shorten units from KiB to k
	top_name_width = 21,						-- width for $top name value default 15
	top_name_verbose = false,					-- If true, top name shows the full command line of  each  process - Default value is false.
	uppercase = false,							-- uppercase or not
	use_spacer = 'none',						-- adds spaces around certain objects to align - default none
	use_xft = true,								-- xft font - anti-aliased font
	xftalpha = 1,								-- alpha of the xft font - between 0-1

	--Windows
	own_window = true,							-- create your own window to draw
	own_window_argb_value = 255,			    -- real transparency - composite manager required 0-255
	own_window_argb_visual = true,				-- use ARGB - composite manager required
	own_window_class = 'Conky',					-- manually set the WM_CLASS name for use with xprop
	own_window_colour = bg_color,				-- set colour if own_window_transparent no
	own_window_transparent = false,				-- if own_window_argb_visual is true sets background opacity 0%
	own_window_title = 'xmonad_conky',			-- set the name manually
	own_window_type = 'override',				-- if own_window true options are: normal/override/dock/desktop/panel
	own_window_hints = 'undecorated,below,above,sticky,skip_taskbar,skip_pager',  -- if own_window true - just hints - own_window_type sets it

	--Colors (Gruvbox Dark)
	color0 = fg_color,
	color1 = fg_color,
	color2 = color0,
	color3 = color1,
};

conky.text = [[
${alignc}${color0}${font2}${time %H:%M}${font}
${voffset 6}${alignc}${color0}${font3}${time %b %d, %Y}${font}${color}
${voffset 18}${goto 12}${color3}CPU${goto 50}$cpu%
${color2}${goto 12}${cpubar 8,254}
${voffset 5}${goto 12}$font${color1}${top name 1}$alignr$color${top cpu 1}%
${goto 12}${color1}${top name 2}$alignr$color${top cpu 2}%
${goto 12}${color1}${top name 3}$alignr$color${top cpu 3}%
${goto 12}${color1}${top name 4}$alignr$color${top cpu 4}%
${goto 12}${color1}${top name 5}$alignr$color${top cpu 5}%
${voffset 14}${goto 12}${color3}RAM${goto 50}$mem/$memmax
${color2}${goto 12}${membar 8,254}${color}
${goto 12}${voffset 5}${color1}${top_mem name 1}$alignr$color${top_mem mem_res 1}
${goto 12}${color1}${top_mem name 2}$alignr$color${top_mem mem_res 2}
${goto 12}${color1}${top_mem name 3}$alignr$color${top_mem mem_res 3}
${goto 12}${color1}${top_mem name 4}$alignr$color${top_mem mem_res 4}
${goto 12}${color1}${top_mem name 5}$alignr$color${top_mem mem_res 5}
${voffset 14}${goto 12}${color3}NETWORK${goto 90} ${downspeed wlan0} |  ${upspeed wlan0}
# ${voffset 18}${color1}${alignc}${font4}QTILE KEYBINDINGS${font}${color}
# ${color1}${hr}${color}
# ${color1}[S]+[RET]${alignr}${color2}open terminal${color}
# ${color1}[S]+b${alignr}${color2}open browser${color}
# ${color1}[S]+[SHIFT]+[RET]${alignr}${color2}run prompt${color}
# ${color1}[S]+[SHIFT]+c${alignr}${color2}close window${color}
# ${color1}[S]+j/k${alignr}${color2}move win focus${color}
# ${color1}[S]+[SHIFT]+hjkl${alignr}${color2}move window${color}
# ${color1}[S]+[1-9]${alignr}${color2}switch workspace${color}
# ${color1}[S]+[SHIFT]+[1-9]${alignr}${color2}send window${color}
# ${color1}[S]+[=]/[-]${alignr}${color2}shrink/expand${color}
# ${color1}${hr}${color}
# ${color1}[S]+e, e${alignr}${color2}launch emacs${color}
# ${color1}[S]+e, b${alignr}${color2}ibuffer${color}
# ${color1}[S]+e, d${alignr}${color2}dired${color}
# ${color1}[S]+e, s${alignr}${color2}eshell${color}
# ${color1}[S]+e, v${alignr}${color2}vterm${color}
# ${color1}${hr}${color}
# ${color1}[S]+p, h${alignr}${color2}dm-hub${color}
# ${color1}[S]+p, b${alignr}${color2}dm-setbg${color}
# ${color1}[S]+p, m${alignr}${color2}dm-man${color}
# ${color1}[S]+p, o${alignr}${color2}dm-bookman${color}
# ${color1}[S]+p, s${alignr}${color2}dm-websearch${color}
# ${color1}${hr}${color}
# ${color1}[S]+[SHIFT]+r${alignr}${color2}restart qtile${color}
# ${color1}[S]+[SHIFT]+q${alignr}${color2}quit qtile${color}
]];
